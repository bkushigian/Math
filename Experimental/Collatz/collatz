#!/usr/bin/python3
try:
    import matplotlib as mpl
    import matplotlib.pyplot as plt
except:
    print("Couldn't import matplotlib")
    from sys import exit
    exit(1)

from collatz import Collatz # Short for CollatzFunction

if __name__ == '__main__':
    from sys import argv
    import argparse # For parsing arguments to dictate program flow

    # Setup marker for display
    marker_dict = {'small'          : ',', 
                   'pixel'          : ',', 
                   'medium'         : '.', 
                   'point'          : '.', 
                   'large'          : 'o',
                   'circle'         : 'o', 
                   'triangle_down'  : 'v', 
                   'triangle_up'    : '^', 
                   'triangle_left'  : '<', 
                   'triangle_right' : '>',
                   'tri_down'       : '1', 
                   'tri_up'         : '2', 
                   'tri_left'       : '3', 
                   'tri_right'      : '4',
                   'octagon'        : '8', 
                   'square'         : 's', 
                   'pentagon'       : 'p', 
                   'plus-filled'    : 'P',
                   'hexagon1'       : 'h', 
                   'hexagon2'       : 'H',
                   'hexagon1'       : 'h', 
                   'hexagon2'       : 'H',
                   'plus'           : '+',
                   'x'              : 'x',
                   'X'              : 'X',
                   'Diamond'        : 'D',
                   'diamond'        : 'd',
                   'thin_diamond'   : 'd',
                   'vline'          : '|',
                   'hline'          : '-'
                }
    parser = argparse.ArgumentParser(description = 'Play around with Collatz')

    parser.add_argument('--mode', '-m', default = 'plot-lengths', 
                        choices = ['plot-lengths', 'plot-orbit', 
                                   'plot-evens', 'plot-comprehension'],
                        help = 'what action should we run?')
    parser.add_argument('--seed', '-s', 
                        default = '(2**32 - 1)', type = str, 
                        help = 'value or comma-separated values to run')
    parser.add_argument('--range', '-r', 
                        default = 800, type = int, 
                        help = 'number of values to experiment on')
    parser.add_argument('--scale', '-S', 
                        default = 'linear', 
                        choices = ['log', 'linear', 'logit'],
                        help = 'log or linear axes scaling')
    parser.add_argument('--collatz-add', 
                        default = 1, help = 'additive term in the collatz equation')
    parser.add_argument('--collatz-mult', default = 3,
                        help = 'multiplicative term in the collatz equation')
    parser.add_argument('--comprehension', '-C', dest='comprehension_seed',
                        default = '3**k - 1 for k in range(args.range)', 
                        help = 'literal python code to go into a list comprehension.')
    parser.add_argument('--shape', '-H', default = 'medium', dest = 'marker_shape',
                        choices = marker_dict.keys(),
                        help = 'size/shape of marker; small, medium, large and MORE!')
    parser.add_argument('--color', '-c', default = 'r', dest = 'marker_color',
                        help = 'color of marker')
    args = parser.parse_args()

    marker = marker_dict['point']
    if args.marker_shape in marker_dict:
        marker = marker_dict[args.marker_shape]
    marker_string = args.marker_color + marker

    exec('seed = {}'.format(args.seed))
    c = Collatz(add = args.collatz_add, mult = args.collatz_mult)

    if args.mode == 'plot-lengths':
        data = c.length(range(1, args.range))
        plt.plot(data, marker_string)
        plt.ylabel('termination time')
        plt.xlabel('start value')
        plt.yscale(args.scale)
        plt.show()

    elif args.mode == 'plot-orbit':
        data = list(c[seed])
        plt.plot(data, marker_string)
        plt.ylabel('value at current iteration')
        plt.xlabel('ith iteration of collatz on seed value {}'.format(seed))
        plt.yscale(args.scale)
        plt.show()

    elif args.mode == 'plot-evens':
        data = list(c.evens(seed))
        plt.plot(data, marker_string)
        plt.ylabel('number of iterations on ith cascade')
        plt.xlabel('ith cascade for seed value {}'.format(seed))
        plt.yscale(args.scale)
        plt.show()

    elif args.mode == 'plot-comprehension':
        exec('seeds = [{}]'.format(args.comprehension_seed))
        data = c.length(seeds)
        plt.plot(data, marker_string)
        plt.show()
